sil_stage raw

import Builtin
import Swift
import SwiftShims

func value() -> Int

// CHECK-LABEL: sil{{.*}}@main
// CHECK: integer_literal
// CHECK: struct
// CHECK: return
sil [ossa] @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'


// CHECK-LABEL: sil{{.*}}@$s5neko25valueSiyF
// CHECK: %0 = alloc_box ${ var Int }, var, name "a"
// CHECK: project_box
// CHECK: integer_literal
// CHECK: metatype
// CHECK: function_ref
// CHECK: apply
// CHECK: store %5
// CHECK: %7 = begin_access
// CHECK: load
// CHECK: end_access
// CHECK: destroy_value
// CHECK: return %8 : $Int
sil hidden [ossa] @$s5neko25valueSiyF : $@convention(thin) () -> Int {
bb0:
  %0 = alloc_box ${ var Int }, var, name "a"      // users: %18, %1
  %1 = project_box %0 : ${ var Int }, 0           // users: %14, %6
  %2 = integer_literal $Builtin.IntLiteral, 10    // user: %5
  %3 = metatype $@thin Int.Type                   // user: %5
  // function_ref Int.init(_builtinIntegerLiteral:)
  %4 = function_ref @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int // user: %5
  %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int // user: %6
  store %5 to [trivial] %1 : $*Int                // id: %6
  %7 = alloc_box ${ var Int }, var, name "b"      // users: %17, %8
  %8 = project_box %7 : ${ var Int }, 0           // user: %13
  %9 = integer_literal $Builtin.IntLiteral, 10    // user: %12
  %10 = metatype $@thin Int.Type                  // user: %12
  // function_ref Int.init(_builtinIntegerLiteral:)
  %11 = function_ref @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int // user: %12
  %12 = apply %11(%9, %10) : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int // user: %13
  store %12 to [trivial] %8 : $*Int               // id: %13
  %14 = begin_access [read] [unknown] %1 : $*Int  // users: %16, %15
  %15 = load [trivial] %14 : $*Int                // user: %19
  end_access %14 : $*Int                          // id: %16
  destroy_value %7 : ${ var Int }                 // id: %17
  destroy_value %0 : ${ var Int }                 // id: %18
  return %15 : $Int                               // id: %19
} // end sil function '$s5neko25valueSiyF'

// Int.init(_builtinIntegerLiteral:)
sil [transparent] [serialized] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int